@model MyEvent.Models.DB.Event
<style>
    .payment-container {
        width: 800px;
        margin: 20px auto;
        background-color: #222;
        color: white;
        padding: 20px;
        border-radius: 8px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .payment-heading {
        text-align: center;
        font-size: 28px;
        margin-bottom: 20px;
    }

    .payment-form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

        .payment-form label {
            font-size: 16px;
        }

        .payment-form input {
            padding: 10px;
            border: none;
            border-radius: 4px;
        }

    .pay-button {
        background-color: green;
        color: white;
        padding: 12px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 18px;
    }

    .payment-message {
        position: fixed;
        top: -60px; /* Start hidden above the viewport */
        left: 50%;
        transform: translateX(-50%);
        background-color: #28a745;
        color: white;
        padding: 15px 25px;
        border-radius: 6px;
        font-size: 18px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.3);
        opacity: 0;
        transition: all 0.6s ease; /* Smooth slide + fade */
        z-index: 9999;
    }

        .payment-message.show {
            top: 20px; /* Slide into view */
            opacity: 1;
        }
</style>

<div class="payment-container">
    <h2 class="payment-heading">Payment Information</h2>

    <form asp-controller="Payment" asp-action="ProcessPayment" method="post" class="payment-form" id="paymentForm">
        <input type="hidden" name="eventId" value="@Model.Id" />

        <label for="holderName">Cardholder Name</label>
        <input type="text" id="holderName" name="HolderName" placeholder="John Doe" required />

        <label for="holderEmail">Email</label>
        <input type="email" id="holderEmail" name="HolderEmail" placeholder="example@mail.com" required />

        <label for="cardNumber">Card Number</label>
        <input type="text" id="cardNumber" name="CardNumber" placeholder="XXXX-XXXX-XXXX-XXXX" required />

        <label for="expiry">Expiry Date</label>
        <input type="text" id="expiry" name="Expiry" placeholder="MM/YY" required />

        <label for="cvv">CVV</label>
        <input type="text" id="cvv" name="CVV" placeholder="123" required />

        <button type="submit" class="pay-button">Pay Now</button>
    </form>


    @if (TempData["Success"] != null)
    {
        <div id="payment-success" class="payment-message" style="background-color: #28a745;">
            @TempData["Success"]
        </div>
    }
    
    @if (ViewBag.ErrorMessage != null)
    {
        <div id="payment-error" class="payment-message" style="background-color: #dc3545;">
            @ViewBag.ErrorMessage
        </div>
    }

</div>

<script>
window.onload = function () {
    const successMsg = document.getElementById("payment-success");
    const errorMsg = document.getElementById("payment-error");

    [successMsg, errorMsg].forEach(function (msg) {
        if (msg && msg.textContent.trim() !== "") {
            msg.classList.add("show");
            setTimeout(function () {
                msg.classList.remove("show");
            }, 3000);
        }
    });

    const form = document.getElementById("paymentForm");
    if (form) {
        form.addEventListener("submit", function (e) {
            let valid = true;
            let messages = [];

            const holderName = document.getElementById("holderName");
            const holderEmail = document.getElementById("holderEmail");
            const cardNumber = document.getElementById("cardNumber");
            const expiryInput = document.getElementById("expiry");
            const cvvInput = document.getElementById("cvv");

            const name = holderName.value.trim();
            const email = holderEmail.value.trim();
            const card = cardNumber.value.trim().replace(/[\s-]/g, ""); // strip spaces/dashes
            const expiry = expiryInput.value.trim();
            const cvv = cvvInput.value.trim();

            // reset errors
            [holderName, holderEmail, cardNumber, expiryInput, cvvInput].forEach(function (input) {
                input.classList.remove("error");
            });

            // Name validation
            if (!/^[A-Za-z\s]{2,}$/.test(name)) {
                valid = false;
                messages.push("Invalid cardholder name.");
                holderName.classList.add("error");
            }

            // Email validation
            const emailRegex = /^[^\s@@]+@@(gmail\.com|yahoo\.com)$/i;
            if (!emailRegex.test(email)) {
                valid = false;
                messages.push("Email must be a valid Gmail or Yahoo address.");
                holderEmail.classList.add("error");
            }


            // Visa or MasterCard only (16 digits)
            const visaRegex = /^4\d{15}$/; 
            const masterRegex = /^(5[1-5]\d{14}|2(2[2-9]\d{12}|[3-6]\d{13}|7[01]\d{12}|720\d{12}))$/; 
            if (!(visaRegex.test(card) || masterRegex.test(card))) {
                valid = false;
                messages.push("Card must be a valid Visa or MasterCard number.");
                cardNumber.classList.add("error");
            }

            // Expiry validation
            const expMatch = expiry.match(/^(\d{2})\/(\d{2})$/);
            if (!expMatch) {
                valid = false;
                messages.push("Expiry date must be in MM/YY format.");
                expiryInput.classList.add("error");
            } else {
                const month = parseInt(expMatch[1], 10);
                const year = parseInt("20" + expMatch[2], 10);
                const now = new Date();
                const currentMonth = now.getMonth() + 1;
                const currentYear = now.getFullYear();

                if (month < 1 || month > 12) {
                    valid = false;
                    messages.push("Invalid expiry month.");
                    expiryInput.classList.add("error");
                } else if (year < currentYear || (year === currentYear && month <= currentMonth)) {
                    valid = false;
                    messages.push("Card expiry must be after the current month.");
                    expiryInput.classList.add("error");
                }
            }

            // CVV validation
            if (!/^\d{3}$/.test(cvv)) {
                valid = false;
                messages.push("CVV must be exactly 3 digits.");
                cvvInput.classList.add("error");
            }

            // Show errors if invalid
            if (!valid) {
                e.preventDefault();

                const oldError = document.getElementById("client-error-box");
                if (oldError) oldError.remove();

                let errorBox = document.createElement("div");
                errorBox.id = "client-error-box";
                errorBox.className = "payment-message show";
                errorBox.style.backgroundColor = "#dc3545";
                errorBox.innerHTML = "❌ " + messages.join("<br>");
                document.body.appendChild(errorBox);

                setTimeout(function () {
                    errorBox.classList.remove("show");
                    setTimeout(function () {
                        errorBox.remove();
                    }, 600);
                }, 3000);
            }
        });
    }
};
</script>

